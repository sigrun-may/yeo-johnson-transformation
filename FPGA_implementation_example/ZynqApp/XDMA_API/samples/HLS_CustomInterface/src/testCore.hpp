#pragma once

/***
 * 
 * This file was automatically generated by HLSCoreScanner - v0.1.0 Branch=main Rev=22f0813 (27 commits)
 * 
 ***/

#include <IP_Cores/HLSCore.h>
#include <ostream>
#include <string>

class testCore : public HLSCore
{
	DISABLE_COPY_ASSIGN_MOVE(testCore)

	///////////////////////////////////////
	// Data addresses
	///////

	const uint64_t PDDRIN_ADDR = 0x10;
	const uint64_t PDDROUT_ADDR = 0x1c;
	const uint64_t ELEMENTS_ADDR = 0x28;

	///////
	// Data addresses
	///////////////////////////////////////

public:
	testCore(std::shared_ptr<class XDMA> pXdma, const uint64_t& ctrlOffset, const std::string& name = "test") :
		HLSCore(pXdma, ctrlOffset, name)
	{}

	///////////////////////////////////////
	// Initialization methods
	///////

	void Init(const uint64_t& pDDRIn, const uint64_t& pDDROut, const uint32_t& elements)
	{
		SetPDDRInAddr(pDDRIn);
		SetPDDROutAddr(pDDROut);
		SetElementsAddr(elements);
	}

	void Init(const Memory& pDDRIn, const Memory& pDDROut, const uint32_t& elements)
	{
		SetPDDRInAddr(pDDRIn);
		SetPDDROutAddr(pDDROut);
		SetElementsAddr(elements);
	}

	///////
	// Initialization methods
	///////////////////////////////////////

	///////////////////////////////////////
	// Setter for the data addresses
	///////

	void SetPDDRInAddr(const uint64_t& addr)
	{
		SetDataAddr(PDDRIN_ADDR, addr);
	}

	void SetPDDRInAddr(const Memory& mem)
	{
		SetDataAddr(PDDRIN_ADDR, mem, AddressType::BIT_64);
	}

	void SetPDDROutAddr(const uint64_t& addr)
	{
		SetDataAddr(PDDROUT_ADDR, addr);
	}

	void SetPDDROutAddr(const Memory& mem)
	{
		SetDataAddr(PDDROUT_ADDR, mem, AddressType::BIT_64);
	}

	void SetElementsAddr(const uint32_t& addr)
	{
		SetDataAddr(ELEMENTS_ADDR, addr);
	}

	///////
	// Setter for the data addresses
	///////////////////////////////////////

	///////////////////////////////////////
	// Getter for core information
	///////

	const std::string& GetVendor() const 
	{
		return m_vendor;
	}

	const std::string& GetLibrary() const 
	{
		return m_library;
	}

	const std::string& GetName() const 
	{
		return m_name;
	}

	const std::string& GetVersion() const 
	{
		return m_version;
	}

	const std::string& GetDescription() const 
	{
		return m_description;
	}

	const std::string& GetDisplayName() const 
	{
		return m_displayName;
	}

	const std::string& GetCoreRevision() const 
	{
		return m_coreRevision;
	}

	const std::string& GetCoreCreationDateTime() const 
	{
		return m_coreCreationDateTime;
	}

	const std::string& GetXilinxVersion() const 
	{
		return m_xilinxVersion;
	}

	///////
	// Getter for core information
	///////////////////////////////////////

	friend std::ostream& operator<<(std::ostream& os, const testCore& core)
	{
		os << "Name: " << core.GetName() << std::endl;
		os << "Description: " << core.GetDescription() << std::endl;
		os << "Library: " << core.GetLibrary() << std::endl;
		os << "Vendor: " << core.GetVendor() << std::endl;
		os << "Version: " << core.GetVersion() << std::endl;
		os << "Core Revision: " << core.GetCoreRevision() << std::endl;
		os << "Display Name: " << core.GetDisplayName() << std::endl;
		os << "Core Creation Date/Time: " << core.GetCoreCreationDateTime() << std::endl;
		os << "Xilinx Version: " << core.GetXilinxVersion() << std::endl;
		return os;
	}

private:
	const std::string m_name                 = "test";
	const std::string m_description          = "Test Core";
	const std::string m_library              = "Testing";
	const std::string m_vendor               = "UBI";
	const std::string m_version              = "0.1";
	const std::string m_coreRevision         = "0";
	const std::string m_displayName          = "VCU128_Test";
	const std::string m_coreCreationDateTime = "2023-03-08T13:28:23Z";
	const std::string m_xilinxVersion        = "2022.1";
};
